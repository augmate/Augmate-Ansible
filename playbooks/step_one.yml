---
#file playbooks/step_one.yml

- hosts: all
  sudo: yes

  vars:
    admin_user_ssh_key: "{{ lookup('file','~/.ssh/id_rsa.pub') }}"
    admin_user: "admin"
    admin_group_sudoers_file_contents: "#managed by ansible\n%admin ALL=(ALL) NOPASSWD:ALL\n"

  tasks:

    # ===========================================================
    # Configure admin user/group for running ansible, copy over key
    # ===========================================================

    - debug: msg="Adding user {{admin_user}} to hosts with key {{admin_user_ssh_key}}"

    - name: create admin group
      action: group 
              name=admin 
              gid=10000 
              system=no

    - name: create admin user
      user: name="{{admin_user}}"
            system=yes
            createhome=yes
            group="sudo"
            shell="/usr/sbin/nologin" 
            uid=9999

    - name: setup authorized key
      action: authorized_key 
              user="{{ admin_user }}" 
              key="{{ admin_user_ssh_key }}"
      notify:
      - restart sshd

    - name: write /etc/sudoers.d/zzz_admin_group. prepend with 2-z [group] in case something goes wrong (sudoers reads in order) 
      copy: content="{{admin_group_sudoers_file_contents}}"
            dest=/etc/sudoers.d/zz_admin_group
            owner=root
            group=root
            mode=0400    

    - name: install ufw to manage iptables
      action: apt pkg={{ item }} state=present
      with_items:
        - ufw 

    - name: use ufw to set base firewall rules (rules are stored in /lib/ufw/user.rules)
      ufw: state=enabled policy=deny
      ufw: rule=allow port=22 proto=tcp
      ufw: state=reloaded

    #likely unneccessary
    #check out this if the role isn't idempotent
    #http://www.hashbangcode.com/blog/adding-iptables-rules-ansible
    #- name: save iptables
    #  command: iptables-save
    #  sudo: true

    - name: restart iptables
      service: name=ufw state=restarted
      sudo: true

    # restart the ssh srver on every run, not just the first
    - name: restart ssh
      service: name=ssh state=restarted

    - set_fact:
        step_one: 'OK'

  handlers:
    - name: restart ssh
      service: name=ssh state=restarted