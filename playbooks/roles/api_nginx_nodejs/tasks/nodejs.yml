---
# file: api_nginx_nodejs/tasks/nodejs.yml

- name: make the serving directory exists
  file:
    state=directory
    path={{api_nginx_root}}
    owner={{nginx_user}}
    group={{nginx_group}}
    mode=0775


# Force a shallow-depth clone of the repo as our api user.
# hostkey should already be populated safely this role's main.yml
# If you're okay with stranger-danger, add accept_hostkey=yes
- name: git clone the repo into our serving directory
  git:
    repo=git@github.com:augmate/api.git
    depth=1
    dest={{api_nginx_root}}
    version=master
    force=yes
  sudo: yes
  sudo_user: "{{api_user}}"

- name: install our required node modules [ present, and *latest* version ]
  npm:
    name: "{{item}}"
    state: latest
    global: yes
  with_items:
    - pm2

- name: Make sure we have an /etc/ssl dir to put our cert and key into for mongodb
  file:
    state=directory
    path=/etc/ssl/
    owner=root
    group=root
    mode=0755

- name: Put our mongodb cert in place
  copy:
    src=keys/mongodb.cert
    dest=/etc/ssl/mongodb.cert
    owner={{user}}
    group={{user}}
    mode=0640

- include_vars: mongodb_key.yml

- name: Put our mongodb (encrypted) key in place
  copy:
    content="{{mongodb_key}}"
    dest=/etc/ssl/mongodb.key
    owner={{user}}
    group={{user}}
    mode=0640

- include_vars: api_wildcard_key.yml

- name: Put our wildcard (*.api.augmate.net) in place for the API server
  copy:
    content="{{api_wildcard_key}}"
    dest="{{api_nginx_root}}"/essential/signedcerts/STAR_api_augmate_net.key
    owner={{user}}
    group={{user}}
    mode=0440

#- name: check that our required node modules [ only present, no constraint on version ]
#  npm:
#    name: "{{item}}"
#    state: present
#    global: yes
#  with_items:
#    -

- name: "Download nodejs from source"
  get_url: url={{nodejs_tarball_url}} dest={{nodejs_tmp_dir}}/{{nodejs_tar_filename}}
  when: (node_aptitude_specific_version_install is defined and node_aptitude_specific_version_install.failed) or node_installed_test.rc == 1

- include_vars: mongodb.yml

- name: "Get mongodb shell tools"
  get_url:
    url="{{mongodb_shell_url}}"
    dest="/tmp/{{mongodb_shell_version}}".deb
    sha256sum="{{mongodb_shell_sha256sum}}"

- name: "Install mongodb shell tools"
  apt:
   deb="/tmp/{{mongodb_shell_version}}".deb

# Ubuntu 14.04 does not come with systemd by default (coming Ubuntu 14.10)
# Accommodate this.
- name: change the shell of the api_user -- pm2 doesn't support system accounts. doing this in a task for easy removal for when it's fixed.
  user:
    name={{user}}
    shell={{user_shell_pm2}}

- name: start the API server with pm2, which also registers it.
  shell: pm2 start server.js {{api_nginx_root}}/prod.config.json --name "API" -i max chdir={{api_nginx_root}}
  sudo: True
  sudo_user: "{{api_user}}"
  ignore_errors: True
  register: pm2_init

- name: As part of the pm2 already-running work around, error out if the release code was for any other reason than 'already running'
  debug: msg="{{pm2_init}}"
  when: "pm2_init.rc == 1"
  failed_when: "'Script already launched' not in pm2_init.stderr"

- name: put /etc/init.d/pm2 script in place
  template:
    dest=/etc/init.d/pm2
    src=pm2.sh.j2
    owner=root
    group=root
    mode=0766


#if service does not respond to the status, command, ps aux | grep pattern counts as running
# pattern: /usr/local/bin/pm2
#
# pm2 also does this bad thing in that it returns an error code 1 if you try to start an already running service.
#
- name: start the node service
  service:
    name: pm2
    enabled: yes
    state: started

