---
# file: teamcity/tasks/main.yml

- name: Check if we're on Amazon, as buildboxes store large files
  command: curl http://169.254.169.254/latest/meta-data/block-device-mapping/ami/
  register: amazon_check
  ignore_errors: yes

- name: If we have an amazon block device available, load the Amazon vars file.  This overrides defaults.
  include: amazon.yml
  when: "'dev' in amazon_check.stdout"

# Set environmental variables for use by TeamCity
- name: Set environmental variables
  template:
    src=profile_d_teamcity.sh.j2
    dest=/etc/profile.d/profile_d_teamcity.sh
    owner=root
    group=root
    mode=0544


# Get TeamCity

- name: Make sure we don't download Teamcity if it's already on disk
  stat: path={{teamcity_download_file}} get_md5=no
  register: teamcity_tar

- name: Get the teamcity tar.gz if we don't have it and the teamcity dir doesn't have a bin folder.
  get_url:
    url="{{teamcity_download_url}}"
    dest="{{teamcity_download_file}}"
    sha256sum={{teamcity_download_sha256}}
  register: get_team_city
  when: (teamcity_tar.stat.exists == false) and (teamcity_bin.stat.exists == false)

- name: stat the teamcity bin folder to ensure the install exists
  stat: path={{teamcity_install_directory}}/TeamCity/bin get_md5=no
  register: teamcity_bin

- name: Make the TeamCity application directory
  file:
    state=directory
    path={{teamcity_install_directory}}
    owner=root
    group=root
    mode=0755

- name: Decompress the TeamCity tar.gz into the serving directory
  shell: tar -xf {{teamcity_download_file}} -C {{teamcity_install_directory}} chdir={{teamcity_download_directory}}
  register: team_city_decompress
  when: (get_team_city.changed == true) or (teamcity_bin.stat.exists == false)

# / Get TeamCity

- name: Put an init script in place so we can run TeamCity like a standard service
  template:
    src=teamcity.sh.j2
    dest=/etc/init.d/teamcity
    owner=root
    group=root
    mode=0755

- name: Ensure TeamCity is told to start at boot.
  service:
    name=teamcity
    enabled=yes
    state=started

# The fun thing about TeamCity is that it really only starts when it gets its first request.
# Fire and forget a curl req to get TeamCity working
- name: Fire off a request to the listening TeamCity port to fire up the service
  command: curl --max-time 30 --fail --silent localhost:{{teamcity_port}}
  async: 35
  poll: 0



- name: Unblock the teamcity serving port from UFW
  ufw: rule=allow port={{teamcity_port}} proto=tcp