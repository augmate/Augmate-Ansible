---
# file: teamcity/tasks/main.yml

- include_vars: teamcity_postgres_password.yml

- name: Check if we're on Amazon, as buildboxes store large files. Wait up to 5 seconds for a response.
  shell: curl --max-time 5 http://169.254.169.254/latest/meta-data/block-device-mapping/ami/
  register: amazon_check
  ignore_errors: yes

- name: If we have an amazon block device available, load the Amazon vars file.  This overrides defaults.
  include_vars: amazon.yml
  when: "'dev' in amazon_check.stdout"

- name: Output the directory that we'll be using as a data directory
  debug: msg="{{TEAMCITY_DATA_PATH}}"

# Set environmental variables for use by TeamCity
- name: Set environmental variables in profile.d
  template:
    src=profile_d_teamcity.sh.j2
    dest=/etc/profile.d/profile_d_teamcity.sh
    owner=root
    group=root
    mode=0544

# If not using the provided startup script, make sure to use this:
#- name: Run the environmental variables script in profile.d so we have them available for this session
#  shell: "/etc/profile.d/profile_d_teamcity.sh"

- name: Make the TeamCity TEAMCITY_DATA_PATH
  file:
    state=directory
    path={{TEAMCITY_DATA_PATH}}
    owner=root
    group=root
    mode=0755

# Get TeamCity
- name: Make sure we don't download Teamcity if it's already on disk
  stat: path={{teamcity_download_file}} get_md5=no
  register: teamcity_tar

- name: stat the teamcity bin folder to ensure the install exists
  stat: path={{teamcity_install_directory}}/TeamCity/bin get_md5=no
  register: teamcity_bin

- name: Get the teamcity tar.gz if we don't have it and the teamcity dir doesn't have a bin folder.
  get_url:
    url="{{teamcity_download_url}}"
    dest="{{teamcity_download_file}}"
    sha256sum={{teamcity_download_sha256}}
  register: get_team_city
  when: (teamcity_tar.stat.exists == false) and (teamcity_bin.stat.exists == false)

- name: Make the TeamCity application directory
  file:
    state=directory
    path={{teamcity_install_directory}}
    owner=root
    group=root
    mode=0755

- name: Make the JDBC driver directory
  file:
    state=directory
    path="{{java_jbdc_postgres_driver_install_directory}}"
    owner=root
    group=root
    mode=0755

- name: Check if the postgres driver already exists in the download/cache path
  stat: path="{{java_jbdc_postgres_driver_download_file}}"
  register: jbdc_postgresql_cache

- name: Check if the postgres driver already exists in the install path
  stat: path="{{java_jbdc_postgres_driver_install_directory}}/{{java_jbdc_postgres_driver}}"
  register: jbdc_postgresql_install

- name: download the postgresql driver if it hasn't been downloaded or put in the proper path
  get_url:
    url="{{java_jbdc_postgres_driver_url}}"
    dest="{{java_jbdc_postgres_driver_download_file}}"
  when: (jbdc_postgresql_cache.stat.exists == false) and (jbdc_postgresql_install.stat.exists == false)

- name: copy postgresql driver into teamcity directory if not already there
  shell: cp {{java_jbdc_postgres_driver_download_file}} {{java_jbdc_postgres_driver_dest}}
  register: copied_postgres_driver
  when: (jbdc_postgresql_cache.changed == true) or (jbdc_postgresql_install.stat.exists == false)

- name: Decompress the TeamCity tar.gz into the serving directory
  shell: tar -xf {{teamcity_download_file}} -C {{teamcity_install_directory}} chdir={{teamcity_download_directory}}
  register: team_city_decompress
  when: (get_team_city.changed == true) or (teamcity_bin.stat.exists == false)

#
# Files
#

- name: (DATA FILES basedir) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}"
    owner=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/*

- name: (DATA FILES _auth) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_auth/"
    owner=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_auth/*

- name: (DATA FILES _logging) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_logging/"
    owner=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_logging/*

- name: make the _notifications dir
  file:
    state=directory
    path="{{teamcity_conf_directory}}/_notifications/"
    owner=root
    group=root
    mode=0664

- name: (DATA FILES _notifications/email) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_notifications/email"
    owner=root
    group=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_notifications/email/*

- name: (DATA FILES _notifications/feed) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_notifications/feed/"
    owner=root
    group=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_notifications/feed/*

- name: (DATA FILES _notifications/ide_notificator) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_notifications/ide_notificator/"
    owner=root
    group=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_notifications/ide_notificator/*

- name: (DATA FILES _notifications/jabber) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_notifications/jabber/"
    owner=root
    group=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_notifications/jabber/*

- name: (DATA FILES _notifications/win32) put the data dir configuration _files_ in place. these are normally populated after clicking 'proceed' in the GUI
  copy:
    src="{{item}}"
    dest="{{teamcity_conf_directory}}/_notifications/win32/"
    owner=root
    group=root
    mode=0664
    backup=no
  with_fileglob:
    - data_directory/config/_notifications/win32/*

- name: make the projects dir
  file:
    state=directory
    path="{{teamcity_conf_directory}}/projects/config"
    owner=root
    group=root
    mode=0664
    recurse=yes

#
# Templates
#

- name: put the build agent property file in place, use hostname as agent name.
  template:
    src=install_directory/buildAgent/conf/buildAgent.properties
    dest="{{teamcity_buildagent_conf_directory}}/buildAgent.properties"
    owner=root
    group=root
    mode=0644

- name: put the database property file in place
  template:
    src=data_directory/config/database.properties
    dest="{{teamcity_conf_directory}}/database.properties"
    owner=root
    group=root
    mode=644

#
# / Templates
#

- name: Put an init script in place so we can run TeamCity like a standard service
  template:
    src=teamcity.sh.j2
    dest=/etc/init.d/teamcity
    owner=root
    group=root
    mode=0755

- name: Ensure TeamCity is told to start at boot.
  service:
    name=teamcity
    enabled=yes

#- name: Now that our preparation work is done, start TeamCity
#  debug: msg="Notifying TeamCity to start."
#  notify:
#   - start teamcity

- name: start teamcity
  service:
    name: teamcity
    state: started
  register: teamcity_start
  failed_when: "'already running' not in teamcity_start.msg"

# The fun thing about TeamCity is that it really only starts when it gets its first request.
# Fire and forget a curl req to get TeamCity working
- name: Fire off a request to the listening TeamCity port to fire up the service
  command: curl --max-time 30 --fail --silent localhost:{{teamcity_port}}
  async: 35
  poll: 0

- name: Unblock the teamcity serving port from UFW
  ufw: state=enabled
  ufw: rule=allow port={{teamcity_port}} proto=tcp